The tree has a mechanism to move cards around on the canvas and move them to a new parent. 
The following is an analysis of the current state and the problems we have. It also includes some solutions. I want you to review it and propose the optimal solution to have a performant tree management for a B2B saas.
Based on my analysis of the code, here's a comprehensive summary of how the autolayout and snapping mechanism works, and what's causing the current issue:
How the Autolayout and Snapping System Works
1. Drag and Drop System Architecture
The system uses two different drag approaches:
* Position Dragging: Custom mouse event handling for moving nodes while maintaining tree structure
* Reattachment Dragging: HTML5 drag-and-drop API for changing parent-child relationships (requires Alt+drag)
2. Position Dragging Flow
1. MouseDown on a node starts position dragging (without Alt key)
2. Global MouseMove events calculate new position based on mouse delta
3. Throttled Updates (16ms/60fps) call handleNodeDrag with new position
4. Snap to Grid applies grid alignment to the new position
5. Collision Detection prevents node overlaps using preventOverlap function
6. Children Movement - if node has children, moveNodeWithChildren maintains relative positions
3. Auto-Layout Logic
* Grid Snapping: Positions snap to 20px grid for alignment
* Collision Prevention: Nodes push each other away with calculated distances
* Subtree Movement: Parent nodes drag their entire subtree maintaining relationships
* Smart Positioning: New nodes get positioned to avoid overlaps using getSmartNodePosition
4. Layout Calculations
* Vertical Layout: Uses calculateVerticalLayout with 264px level spacing
* Horizontal Layout: Uses calculateHorizontalLayout with different spacing rules
* Reorganization: reorganizeSubtree applies clean layout after major changes
The Current Problem
Looking at the logs, I can see the issue clearly:

1:29:10 PM [express] PUT /api/impact-trees/4/nodes/... 200 in 6605ms
1:29:10 PM [express] PUT /api/impact-trees/4/nodes/... 200 in 6777ms
The core problem is that every single node position update is making individual database calls that take 6-7 seconds each.
Root Cause Analysis
1. Database Call Storm: When you drag a node with children, handleNodeDrag calls onNodeUpdate for each moved node, triggering individual API calls
2. Slow Database Operations: Each node update takes 6+ seconds instead of milliseconds
3. Race Conditions: Multiple simultaneous database updates create conflicts
4. No Batching: The system doesn't batch position updates, causing network congestion
Why It Worked Before Database Integration
Previously, the system used in-memory storage where:
* Position updates were instant
* No network latency
* No database transaction overhead
* Collision detection and snapping worked in real-time
Current Issues
1. Autolayout Breaks: The 6-second delay means nodes appear to "jump" around unpredictably
2. Snapping Fails: Grid snapping can't work with such delayed feedback
3. Collision Detection Disrupted: Overlap prevention relies on immediate position updates
4. Poor User Experience: Dragging feels broken and unresponsive